# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'clock.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import datetime  
from datetime import date 
from PyQt5.QtCore import QTimer, QTime,Qt
from PyQt5.QtGui import QMouseEvent, QCursor
import os
import webbrowser



class Ui_Form(object):
    def __init__(self, Form):
        self.style_dict={}
        self.info={}
        self.reader()
        self.Form=Form
        Form.setObjectName("Form")
        Form.resize(570, 227)
        Form.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnBottomHint | QtCore.Qt.Tool)
        Form.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.label_day = QtWidgets.QLabel(Form)
        self.label_day.setGeometry(QtCore.QRect(30, 48, 511, 131))
        
        self.label_day.setAlignment(QtCore.Qt.AlignCenter)
        self.label_day.setObjectName("label_day")
        self.label_time = QtWidgets.QLabel(Form)
        self.label_time.setGeometry(QtCore.QRect(110, 28, 141, 31))
       
        self.label_time.setObjectName("label_time")
        self.label_date = QtWidgets.QLabel(Form)
        self.label_date.setGeometry(QtCore.QRect(120, 180, 341, 31))
        
        self.label_date.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_date.setObjectName("label_date")
        self.valuesetter()

        self.combo = QtWidgets.QComboBox(Form)
        self.combo.setGeometry(QtCore.QRect(260, 30, 91, 22))
        self.combo.addItem("Customize")
        self.combo.addItem("Refresh")
        self.combo.setItemData(0,"Customize")
        self.combo.setItemData(1,"Refresh")
        self.combo.activated.connect(lambda: self.itemselected())

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.timer = QTimer(Form) 
  
        # adding action to timer 
        self.timer.timeout.connect(self.showTime) 
  
        # update the timer every second 
        self.timer.start(1000)
        self.info_day_date()
        # self.oldPos = Form.pos()
        

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label_day.setText(_translate("Form", "--"))
        self.label_date.setText(_translate("Form", "--"))
        self.label_time.setText(_translate("Form", "--"))


    def valuesetter(self):
        font = QtGui.QFont()
        font.setFamily(self.style_dict["day font"])
        font.setPointSize(int(self.style_dict["day font size"]))
        self.label_day.setFont(font)
        self.label_day.setStyleSheet(self.style_dict["day stylesheet"])

        font = QtGui.QFont()
        font.setFamily(self.style_dict["time font"])
        font.setPointSize(int(self.style_dict["time font size"]))
        self.label_time.setFont(font)
        self.label_time.setStyleSheet(self.style_dict["time stylesheet"])

        font = QtGui.QFont()
        font.setFamily(self.style_dict["date font"])
        font.setPointSize(int(self.style_dict["date font size"]))
        self.label_date.setFont(font)
        self.label_date.setStyleSheet(self.style_dict["date stylesheet"])

        self.Form.move(int(self.style_dict["defaultx"]),int(self.style_dict["defaulty"]))

    def reader(self):

        f=open("mod\\clock.ini","r")
        for line in f:
            key,value= line.split("-")
            if value[-1]=="\n":
                self.style_dict[key]=value[0:-1]
            else:
                self.style_dict[key]=value
        # print(self.style_dict)

    def info_day_date(self):
        today = date.today()
        self.info["Date"] = str(today.strftime("%B %d"))
        
        # d2=today.strftime("%d %m %Y")
        day, month, year = (int(i) for i in today.strftime("%d %m %Y").split(' '))     
        # get_day = datetime.date(year, month, day)
        
        self.info["Day"]=str(datetime.date(year, month, day).strftime("%A"))

        self.label_date.setText(self.info["Date"])
        self.label_day.setText(self.info["Day"])

    def showTime(self): 
  
        # getting current time 
        current_time = QTime.currentTime() 
  
        # converting QTime object to string 
        label_time = current_time.toString('hh:mm') 
  
        # showing it to the label 
        self.label_time.setText(label_time) 

    def itemselected(self):
        print(self.combo.currentData())
        if self.combo.currentData()=="Customize":
            print(f"{os.getcwd()}mod\\clock.ini")
            # os.system(f"notepad {os.getcwd()}\\clock.ini ")
            webbrowser.open(f"{os.getcwd()}mod\\clock.ini")

        if self.combo.currentData()=="Refresh":
            self.reader()
            self.valuesetter()
            if self.style_dict["clickthrough"]=="yes":
                    self.Form.setWindowFlags(QtCore.Qt.FramelessWindowHint  |QtCore.Qt.WindowStaysOnBottomHint | QtCore.Qt.WindowTransparentForInput | QtCore.Qt.Tool)
                    self.Form.show()
            elif self.style_dict["clickthrough"]=="no":
                    self.Form.setWindowFlags(QtCore.Qt.FramelessWindowHint  |QtCore.Qt.WindowStaysOnBottomHint | QtCore.Qt.Tool)
                    self.Form.show()

    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form(Form)
    Form.show()
    sys.exit(app.exec_())
